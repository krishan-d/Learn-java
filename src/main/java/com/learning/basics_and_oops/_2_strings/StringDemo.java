package com.learning.basics_and_oops._2_strings;

import java.util.Arrays;
import java.util.List;
import java.util.StringJoiner;
import java.util.stream.Collectors;

public class StringDemo {

    private static String s0, s1, s2, s3;

    public static void main(String[] args) {
        /*
         * String
         * java.lang.String
         * Immutable object
         * String implements [Serializable, Comparable and CharSequence]
         * CharSequence is implemented by [String, StringBuffer and StringBuilder]
         * */

        //Creating String...

        //1. String Literal
        //A. Each Time a string literal is created, JVM checks the "String constant pool".
        //B. If string already exists in pool, a reference to the pooled instance is returned.
        //C. If string doesn't exist in pool, a new string instance is created and placed in the pool.

        s0 = "Hi There!";
        s1 = "Hi There!"; // It doesn't create a new instance
        System.out.println("s0.hashCode()" + s0.hashCode() + " | s1.hashCode(): " + s1.hashCode());

        //2. new Keyword
        s2 = new String("Hi There!");
        //In such case, JVM will create new string object in normal(non-pool) heap memory.
        //And literal "Hi There!" will be placed in the String constant pool.
        //The variable s2 will refer to the object in a heap(non-pool).
        System.out.println("s2.hashCode() = " + s2.hashCode());


        //3. passing array object
        char[] charArray = {'H', 'i', ' ', 'M', 'e', '!'};
        s2 = new String(charArray);
        System.out.println(s2);


        //reference
        s3 = s1; // Reference of string Literal
        //This operation well give same hashcode for s1 and s3 i.e. both object are the references for a single memory address,
        //That holds string value.
        System.out.println("s1.hashCode() = " + s1.hashCode());
        System.out.println("s3.hashCode() = " + s3.hashCode());
        System.out.println(s3);


        //String Methods...
        String string = "ProgrammingLanguage";
        int size = string.length();

        //charAt(index)
        char c = string.charAt(2); // o

        //indexOf()
        System.out.println(string.indexOf('r'));
        System.out.println(string.indexOf('r', 2));
        System.out.println(string.indexOf("Lang"));
        System.out.println(string.indexOf("Lang", 12)); // -1

        //replace()
        string.replace("Programming", "Coding"); // CodingLanguage

        //substring()
        string = "01234567";
        String subString = string.substring(3, 7); // 3456
        System.out.println(subString);

        //contains()
        string = "  There is an inn!    ";
        string = string.trim(); // There is an inn!
        if (string.contains("inn")) System.out.println("Provided string contains(\"inn\")!");;

        //split()
        String[] array = string.split("\s");
        System.out.println(array);

        // String.format() method:
        string = String.format("%d, %x, %s, %f, %e, %g, %c", 17, 27, "Hi", 10.10, 10.10, 10.10, 'a');
        System.out.println(string);


        //**String.getBytes(): get byte array of specified string
        string = "Morning";
        byte[] ba = string.getBytes();
        for (byte v : ba) System.out.print(v + " ");


        //**getChars(): To copy string into a char array
        string = "Hi Everyone!";
        char[] ch = new char[string.length()];
        try {
            string.getChars(4, 10, ch, 0);
            System.out.println(ch);
        } catch (Exception ignored) {

        }

        String stripped = "   hi KrisH ! ".strip();
        System.out.println("strip: " +stripped);

        // isEmpty()
        String s4 = "";  // Empty String
        String s5;

        // Convert Primitive data To String
        // valueOf()
        int number = 10;
        String numberString = String.valueOf(number);
        System.out.println(numberString + " Type: " + numberString.getClass().getName());


        /*
        * hashCode():
        * - Returns the hashcode value of an object on calling.
        * - It returns an integer or a 4 byte value which is generated by hashing algorithm.
        *
        * Hashing :
        * The process of assigning a unique value to an object or attribute using an algorithm, which enables quicker
        * access.
        * */

    }

    /**
     * String comparison based on :
     * equals() and equalsIgnoreCase() method, == operator and compareTo() method
     * */
    public static void stringComparison() {

        s1 = "Evening";
        s2 = "Evening";
        s3 = new String("Evening");

        //1. equals() method:
        //equals() compares original content(values) of the string for equality.
        System.out.println(s1.equals(s2)); //True
        System.out.println(s1.equals(s3)); //True

        //2. == operator
        //The == operator compares references not values.
        System.out.println((s1 == s2)); //True
        System.out.println((s1 == s3)); //False

        //3. compareTo()
        //A. s1 == s2 : returns 0
        //B. s1>s2 : returns +ve value
        //C. s1<s2 : returns -ve value

        int isEqual = s1.compareTo(s2);  // 0 (Means [s1 == s2])
        isEqual = "Even".compareTo(s2);  //-3 (Negative Means [Even < s2])

//      Lexicographical Order:
//      also known as alphabetic or dictionary order, orders characters as follows:
//      A < B < ...< Y < Z < a < b < ... y < z


    }

    public static void stringConcatenation() {

        s1 = "Everyone!";
        s2 = "Hi ".concat(s1);
        s2 = s2 + "\sMorning.."; // Hi Everyone! Morning...

        //String.join()
        s3 = String.join(",", "A", "B", "C");

        //String.format()
        s1 = "Hey\s";
        s2 = "This is format() method!";
        s3 = String.format("%s%s", s1, s2);

        //StringJoiner
        StringJoiner s = new StringJoiner("|");
        s.add("P").add("Q").add("R");
        System.out.println(s);

        //Collectors.joining()
        List<String> list = Arrays.asList("Hi", "Hey", "Eve");
        s3 = list.stream().collect(Collectors.joining(", "));
        System.out.println(s3);

        //or
        //Using StringBuilder
    }

    /**
     * Execution Time comparison b/w String vs StringBuilder vs StringBuffer
     */
    public static void executionTimeComparison() {

        //1. String
        long startTime = System.currentTimeMillis();
        String str2 = new String("Hi");
        for (int i = 0; i < 1000; i++) {  //Using 1/10 operations, will still take more time
            str2 += "Eve";        //Actually, it is creating new Strings because Strings are immutable
        }
        System.out.println("Time taken by String: " + (System.currentTimeMillis() - startTime) + "ms");
        System.gc();

        //2. StringBuffer
        startTime = System.currentTimeMillis();
        StringBuffer sb2 = new StringBuffer("Hi");
        sb2.append("Eve".repeat(10000));
        System.out.println("Time taken by StringBuffer: " + (System.currentTimeMillis() - startTime) + "ms");
        System.gc();

        //3. StringBuilder
        startTime = System.currentTimeMillis();
        StringBuilder sb3 = new StringBuilder("Hi");
        sb3.append("Eve".repeat(10000));
        System.out.println("Time taken by StringBuilder: " + (System.currentTimeMillis() - startTime) + "ms");
        System.gc();

    }
}
